=encoding utf8

=head1 NAME

Quiq::Sdoc::Node - Basisklasse für die Knoten eines Sdoc-Dokuments (abstrakt)

=head1 BASE CLASS

L<Quiq::Hash|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Hash.pod>

=head1 DESCRIPTION

Die Klasse dient als Basisklasse für die Knotenklassen eines
Sdoc-Dokuments. Jede Knotenklasse repräsentiert einen speziellen
Elementtyp. Folgende Elementtypen existieren:

    Document
    Section
    List
    Item
    Paragraph
    Quote
    Code
    PageBreak

=head1 METHODS

=head2 Accessors

=head3 parent() - Liefere/Setze Elternknoten

=head4 Synopsis

    $node = $doc->parent;
    $node = $doc->parent($node);

=head4 Description

Liefere/Setze den Elternknoten. Die Referenz wird als schwache
Referenz gespreichert, so dass eine Destrukturierung des
Elternknotens durch die Referenz nicht verhindert wird.

=head3 childs() - Liste der Kindknoten

=head4 Synopsis

    @arr|$arr = $doc->childs;

=head4 Description

Liefere die Liste der Kindknoten. Im Skalarkontext liefere eine
Referenz auf die Liste.

=head3 title() - Liefere den Titel des Knotens

=head4 Synopsis

    $title = $node->title;

=head4 Description

Liefere den Titel des Knotens. Hat der Knoten keinen Titel - weil dieser
nicht definiert ist oder der Knoten dieses Attribut nicht besitzt -
liefere einen Leerstring.

Anmerkung: Bestimmte Knotenklassen (Dokument, Definitionslisten-Element)
überschreiben diese Methode.

=head2 Methods

=head3 nextType() - Liefere Typ des nächsten Elements

=head4 Synopsis

    ($type,$attibuteA) = $parent->nextType($doc);

=head4 Description

Analysiere die nächste nichtleere Zeile in LineProcessor $doc
(Leerzeilen am Anfang werden von der Methode entfernt)
hinsichtlich ihres Elementtyps und liefere die
Typbezeichnung und Attribute - sofern spezifiziert - zurück.

Folgende Elementtypen werden unterschieden:

=over 4

=item Section

Ein oder mehrere = am Zeilenanfang gefolgt von einem Leerzeichen.
Zusätzlich zur Typbezeichnung wird der Level der Section geliefert.

=item List

Wird mit dem ersten Item geliefert.

=item Item

Zeile, die von $ln->item() als Item identifiziert wird.

=item Table

Wird mit der ersten Row geliefert.

=item Row

Zeile mit | am Anfang und am Ende.

=item Code

Zeile mit Leerzeichen oder | am Anfang.

=item Quote

Zeile mit > am Anfang.

=item PageBreak

Zeile mit ~~~ (mindestens drei Tilden) am Anfang.

=item Paragraph

Zeile, auf die keine der obigen Eigenschaften zutrifft.

=back

=head3 parseObjectSpec() - Liefere Information zu Objektspezifikation

=head4 Synopsis

    ($type,$arr) = $node->parseObjectSpec($doc);

=head4 Description

Parse Objektspezifikation auf $doc und liefere den Typ und
die Attribut/Wert-Paare des Objekts zurück.

=head3 anchors() - Liefere Zeichenkette aus allen Ankern

=head4 Synopsis

    $str = $node->anchors($format,@args);

=head4 Description

Liefere die Zeichenkette aus allen Ankern zur Einbettung in das
Dokument.

=head3 dumpChilds() - Erzeuge Repräsentation für Subelemente

=head4 Synopsis

    $str = $node->dumpChilds($format,@args);

=head4 Description

Erzeuge eine externe Repräsentation im Format $format für die
Subelemente des Knotens und liefere diese zurück. Dies ist eine
Hilfsmethode, die von den Subkalssenmethoden $node->dump() gerufen
wird um die externe Repräsentation eines Knotens zu erzeugen.

Elementtypen mit Subelementen (in Klammern die erlaubten Subelemente):

    Document (alle Typen)
    Section (alle Typen)
    List (nur Items)
    Item (alle Typen)
    Table (nur Rows)

Elementtypen ohne Subelemente:

    Paragraph
    Code
    Quote
    PageBreak
    Row

=head3 rootNode() - Liefere Wurzelknoten

=head4 Synopsis

    $root = $node->rootNode;

=head3 select() - Selektiere Knoten

=head4 Synopsis

    @nodes|$nodeA = $node->select(@keyVal);

=head4 Description

Selektiere alle Knoten ab und einschließlich Knoten $node, die die
Kriterien @keyVal erfüllen und liefere die Liste dieser Knoten zurück.
Im Skalarkontext liefere eine Referenz auf die Liste.

Ist kein Kriterium angegeben, liefere alle Knoten.

=head3 expand() - Schütze Metazeichen und ersetze Inline-Segmente

=head4 Synopsis

    $newVal = $sdoc->expand($format,$val,$inlineSegments,@args);

=head4 Description

Ersetze in $val die Metazeichen des Zielformats $format (<, >, &
im Falle von HTML) und liefere das Resultat zurück.
Ist $inlineSegments wahr, expandiere zusätzlich die
Sdoc Inline-Segmente.

B<Inline-Segmente>

Folgende Inline-Segmente sind definiert:

    B{...} bold
    C{...} constant width
    I{...} italic
    Q{...} quote
    U{...} URL (Link auf eine Webseite)
    G{...} Grafik/Bild

In Code-Abschnitten sollte keine Inline-Ersetzung stattfinden.

=head3 tableOfContents() - Erzeuge Inhaltsverzeichnis

=head4 Synopsis

    $str = $node->tableOfContents($format,@args);

=head1 VERSION

1.136

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Sdoc/Node.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2019 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
