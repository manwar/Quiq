=encoding utf8

=head1 NAME

Quiq::Cascm - Schnittstelle zu CA Harvest SCM

=head1 BASE CLASS

L<Quiq::Hash|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Hash.pod>

=head1 DESCRIPTION

Ein Objekt der Klasse stellt eine Schnittstelle zu einem
CA Harvest SCM Server zur Verfügung.

=head2 Begriffe

=over 4

=item Workspace

Lokales Verzeichnis mit (Kopien von) Repository-Dateien. Der
Pfad wird "Clientpath" genannt, Option -cp´, z.B. C<~/var/workspace>.

=back

=head1 METHODS

=head2 Konstruktor

=head3 new() - Instantiiere Objekt

=head4 Synopsis

    $scm = $class->new(@attVal);

=head4 Arguments

=over 4

=item @attVal

Liste von Attribut-Wert-Paaren.

=back

=head4 Returns

Objekt

=head4 Description

Instantiiere ein Objekt der Klasse und liefere eine Referenz auf
dieses Objekt zurück.

=head2 Externe Dateien

=head3 putFiles() - Füge Dateien zum Repository hinzu

=head4 Synopsis

    $scm->putFiles($package,$repoDir,@files);

=head4 Arguments

=over 4

=item $packge

Package, dem die Dateien innerhalb von CASCM zugeordnet werden.

=item $repoDir

Zielverzeichnis I<innerhalb> des Workspace, in das die Dateien
kopiert werden. Dies ist ein I<relativer> Pfad.

=item @files

Liste von Dateien I<außerhalb> des Workspace.

=back

=head4 Returns

nichts

=head4 Description

Kopiere die Dateien @files in das Workspace-Verzeichnis $repoDir
und checke sie anschließend ein, d.h. füge sie zum Repository hinzu.
Eine Datei, die im Workspace-Verzeichnis schon vorhanden ist, wird
zuvor ausgecheckt.

Mit dieser Methode ist es möglich, sowohl neue Dateien zum Workspace
hinzuzufügen als auch bereits existierende Dateien im Workspace
zu aktualisieren. Dies geschieht für den Aufrufer transparent, er
braucht sich um die Unterscheidung nicht zu kümmern.

=head2 Workspace-Dateien

=head3 checkout() - Checke Repository-Dateien aus

=head4 Synopsis

    $scm->checkout($package,@repoFiles);

=head4 Arguments

=over 4

=item $package

Package, dem die ausgecheckte Datei (mit reservierter Version)
zugeordnet wird.

=item @repoFiles

Liste von Workspace-Dateien, die ausgecheckt werden.

=back

=head4 Returns

nichts

=head4 Description

Checke die Workspace-Dateien @repoFiles aus.

=head3 checkin() - Checke Workspace-Datei ein

=head4 Synopsis

    $scm->checkin($package,$repoFile);

=head4 Arguments

=over 4

=item $package

Package, dem die neue Version der Datei zugeordnet wird.

=item $repoFile

Datei I<innerhalb> des Workspace. Der Dateipfad ist ein I<relativer> Pfad.

=back

=head4 Returns

nichts

=head4 Description

Checke die Workspace-Datei $repoFile ein, d.h. übertrage ihren Stand
als neue Version ins Repository und ordne diese dem Package $package zu.

=head3 version() - Versionsnummer Repository-Datei

=head4 Synopsis

    $version = $scm->version($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Repository-Datei

=back

=head4 Returns

Versionsnummer (String)

=head3 listVersion() - Versionsinformation zu Repository-Datei

=head4 Synopsis

    $info = $scm->listVersion($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Der Pfad der Repository-Datei.

=back

=head4 Returns

Informations-Text (String)

=head4 Description

Ermittele die Versionsinformation über Datei $repoFile und liefere
diese zurück.

=head3 deleteVersion() - Lösche Repository-Datei

=head4 Synopsis

    $scm->deleteVersion($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Der Pfad der zu löschenden Repository-Datei.

=back

=head4 Returns

Nichts

=head2 Packages

=head3 createPackage() - Erzeuge Package

=head4 Synopsis

    $scm->createPackage($package);

=head4 Arguments

=over 4

=item $packge

Name des Package, das erzeugt werden soll.

=back

=head4 Returns

nichts

=head4 Description

Erzeuge Package $package.

=head3 deletePackage() - Lösche Package

=head4 Synopsis

    $scm->deletePackage($package);

=head4 Arguments

=over 4

=item $packge

Name des Package, das gelöscht werden soll.

=back

=head4 Returns

nichts

=head4 Description

Lösche Package $package.

=head3 promotePackage() - Promote Package

=head4 Synopsis

    $scm->promotePackage($package,$state);

=head4 Arguments

=over 4

=item $packge

Package, das promotet werden soll.

=item $state

Stufe, auf dem sich das Package befindet.

=back

=head4 Returns

nichts

=head4 Description

promote Package $package, das sich auf Stufe $state befindet
(befinden muss) auf die darüberliegende Stufe. Befindet sich das
Package auf einer anderen Stufe, schlägt das Kommando fehl.

=head3 demotePackage() - Demote Package

=head4 Synopsis

    $scm->demotePackage($package,$state);

=head4 Arguments

=over 4

=item $packge

Package, das demotet werden soll.

=item $state

Stufe, auf dem sich das Package befindet.

=back

=head4 Returns

nichts

=head4 Description

Demote Package $package, das sich auf Stufe $state befindet
(befinden muss) auf die darunterliegende Stufe. Befindet sich das
Package auf einer anderen Stufe, schlägt das Kommando fehl.

=head2 Workspace

=head3 sync() - Synchronisiere Workspace mit Repository

=head4 Synopsis

    $scm->sync;

=head4 Description

Bringe den Workspace auf den Stand des Repository.

=head2 Privat

=head3 credentialOptions() - Liste der Credential-Optionen

=head4 Synopsis

    @arr = $scm->credentialOptions;

=head3 run() - Führe CA Harvest SCM Kommando aus

=head4 Synopsis

    $output = $scm->run($scmCmd,$c);

=head4 Description

Führe das CA Harvest SCM Kommando $scmCmd mit den Optionen des
Kommandozeilenobjekts $c aus und liefere die Ausgabe des
Kommandos zurück.

=head3 writeOutput() - Schreibe Kommando-Ausgabe

=head4 Synopsis

    $scm->writeOutput($output);

=head1 VERSION

1.133

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Cascm.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2019 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
