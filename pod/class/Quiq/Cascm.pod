=encoding utf8

=head1 NAME

Quiq::Cascm - Schnittstelle zu CA Harvest SCM

=head1 BASE CLASS

L<Quiq::Hash|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Hash.pod>

=head1 DESCRIPTION

=head2 Begriffe

=over 4

=item Workspace-Verzeichnis

Verzeichnis mit den ausgecheckten Dateien. Im CASCM Jargon auch
"Clientpath" genannt, Option -cp.

=item Repository-Datei

Datei im lokalen Workspace-Verzeichnis. Der Pfad einer
Repository-Datei ist relativ zum Repository-Verzeichnis, beginnt
also innerhalb des Workspace-Verzeichnisses.

=back

=head1 METHODS

=head2 Konstruktor

=head3 new() - Instantiiere Objekt

=head4 Synopsis

    $scm = $class->new(@attVal);

=head4 Arguments

=over 4

=item @attVal

Liste von Attribut-Wert-Paaren.

=back

=head4 Returns

Objekt

=head4 Description

Instantiiere ein Objekt der Klasse und liefere eine Referenz auf
dieses Objekt zurück.

=head2 Kommandos

=head3 addFiles() - Füge Dateien zu Repository hinzu

=head4 Synopsis

    $scm->addFiles($package,$repoDir,@files);

=head4 Arguments

=over 4

=item $packge

Package, zu dem die Dateien hinzugefügt werden.

=item $repoDir

Verzeichnis I<innerhalb> des Workspace, in das die Dateien
kopiert werden.

=item @files

Liste von Dateien I<außerhalb> des Workspace.

=back

=head4 Returns

nichts

=head3 checkin() - Checke Repository-Dateien ein

=head4 Synopsis

    $scm->checkin($package,@repoFiles);

=head4 Arguments

=over 4

=item $packge

Package.

=item @repoFiles

Liste von Repository-Dateien.

=back

=head4 Returns

nichts

=head3 checkout() - Checke Repository-Dateien aus

=head4 Synopsis

    $scm->checkout($package,@repoFiles);

=head4 Arguments

=over 4

=item $packge

Package.

=item @repoFiles

Liste von Repository-Dateien.

=back

=head4 Returns

nichts

=head3 createPackage() - Erzeuge Package

=head4 Synopsis

    $scm->createPackage($package);

=head4 Arguments

=over 4

=item $packge

Name des Package, das erzeugt werden soll.

=back

=head4 Returns

nichts

=head3 deletePackage() - Lösche Package

=head4 Synopsis

    $scm->deletePackage($package);

=head4 Arguments

=over 4

=item $packge

Name des Package, das gelöscht werden soll.

=back

=head4 Returns

nichts

=head3 demote() - Demote Package

=head4 Synopsis

    $scm->demote($package,$state);

=head4 Arguments

=over 4

=item $packge

Package, das demotet werden soll.

=item $state

Stufe, auf dem sich das Package befindet.

=back

=head4 Returns

nichts

=head4 Description

Demote Package $package, das sich auf Stufe $state befindet
(befinden muss) auf die darunterliegende Stufe. Befindet sich das
Package auf einer anderen Stufe, schlägt das Kommando fehl.

=head3 promote() - Promote Package

=head4 Synopsis

    $scm->promote($package,$state);

=head4 Arguments

=over 4

=item $packge

Package, das promotet werden soll.

=item $state

Stufe, auf dem sich das Package befindet.

=back

=head4 Returns

nichts

=head4 Description

promote Package $package, das sich auf Stufe $state befindet
(befinden muss) auf die darüberliegende Stufe. Befindet sich das
Package auf einer anderen Stufe, schlägt das Kommando fehl.

=head3 version() - Versionsnummer Repository-Datei

=head4 Synopsis

    $versiion = $scm->version($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Repository-Datei

=back

=head4 Returns

Versionsnummer (String)

=head3 listVersion() - Versionsinformation zu Repository-Datei

=head4 Synopsis

    $info = $scm->listVersion($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Der Pfad der Repository-Datei.

=back

=head4 Returns

Informations-Text (String)

=head4 Description

Ermittele die Versionsinformation über Datei $repoFile und liefere
diese zurück.

=head3 deleteVersion() - Lösche Repository-Datei

=head4 Synopsis

    $scm->deleteVersion($repoFile);

=head4 Arguments

=over 4

=item $repoFile

Der Pfad der zu löschenden Repository-Datei.

=back

=head4 Returns

Nichts

=head3 putFiles() - Füge Datei zu Repository hinzu oder aktualisiere sie

=head4 Synopsis

    $scm->putFiles($package,$repoDir,@files);

=head4 Arguments

=over 4

=item $packge

Package, zu dem die Dateien gehören bzw. zu dem sie
hinzugefügt werden.

=item $repoDir

Verzeichnis I<innerhalb> des Workspace, in das die Dateien
kopiert werden.

=item @files

Liste von Dateien I<außerhalb> des Workspace.

=back

=head4 Returns

nichts

=head3 sync() - Synchronisiere Workspace mit Repository

=head4 Synopsis

    $scm->sync;

=head4 Description

Bringe den Workspace auf den Stand des Repository.

=head2 Privat

=head3 credentialOptions() - Liste der Credential-Optionen

=head4 Synopsis

    @arr = $scm->credentialOptions;

=head3 run() - Führe CA Harvest SCM Kommando aus

=head4 Synopsis

    $output = $scm->run($scmCmd,$c);

=head4 Description

Führe das CA Harvest SCM Kommando $scmCmd mit den Optionen des
Kommandozeilenobjekts $c aus und liefere die Ausgabe des
Kommandos zurück.

=head3 writeOutput() - Schreibe Kommando-Ausgabe

=head4 Synopsis

    $scm->writeOutput($output);

=head1 VERSION

1.133

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/Cascm.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2019 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
